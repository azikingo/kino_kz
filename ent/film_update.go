// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kinokz/ent/film"
	"kinokz/ent/predicate"
	"kinokz/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilmUpdate is the builder for updating Film entities.
type FilmUpdate struct {
	config
	hooks     []Hook
	mutation  *FilmMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FilmUpdate builder.
func (fu *FilmUpdate) Where(ps ...predicate.Film) *FilmUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FilmUpdate) SetName(s string) *FilmUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableName(s *string) *FilmUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FilmUpdate) ClearName() *FilmUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetDescription sets the "description" field.
func (fu *FilmUpdate) SetDescription(s string) *FilmUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableDescription(s *string) *FilmUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FilmUpdate) ClearDescription() *FilmUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetAuthorID sets the "author_id" field.
func (fu *FilmUpdate) SetAuthorID(i int64) *FilmUpdate {
	fu.mutation.SetAuthorID(i)
	return fu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableAuthorID(i *int64) *FilmUpdate {
	if i != nil {
		fu.SetAuthorID(*i)
	}
	return fu
}

// ClearAuthorID clears the value of the "author_id" field.
func (fu *FilmUpdate) ClearAuthorID() *FilmUpdate {
	fu.mutation.ClearAuthorID()
	return fu
}

// SetManagerID sets the "manager_id" field.
func (fu *FilmUpdate) SetManagerID(i int64) *FilmUpdate {
	fu.mutation.SetManagerID(i)
	return fu
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableManagerID(i *int64) *FilmUpdate {
	if i != nil {
		fu.SetManagerID(*i)
	}
	return fu
}

// ClearManagerID clears the value of the "manager_id" field.
func (fu *FilmUpdate) ClearManagerID() *FilmUpdate {
	fu.mutation.ClearManagerID()
	return fu
}

// SetStadiumID sets the "stadium_id" field.
func (fu *FilmUpdate) SetStadiumID(i int64) *FilmUpdate {
	fu.mutation.ResetStadiumID()
	fu.mutation.SetStadiumID(i)
	return fu
}

// SetNillableStadiumID sets the "stadium_id" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableStadiumID(i *int64) *FilmUpdate {
	if i != nil {
		fu.SetStadiumID(*i)
	}
	return fu
}

// AddStadiumID adds i to the "stadium_id" field.
func (fu *FilmUpdate) AddStadiumID(i int64) *FilmUpdate {
	fu.mutation.AddStadiumID(i)
	return fu
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (fu *FilmUpdate) ClearStadiumID() *FilmUpdate {
	fu.mutation.ClearStadiumID()
	return fu
}

// SetStar sets the "star" field.
func (fu *FilmUpdate) SetStar(f float64) *FilmUpdate {
	fu.mutation.ResetStar()
	fu.mutation.SetStar(f)
	return fu
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableStar(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetStar(*f)
	}
	return fu
}

// AddStar adds f to the "star" field.
func (fu *FilmUpdate) AddStar(f float64) *FilmUpdate {
	fu.mutation.AddStar(f)
	return fu
}

// ClearStar clears the value of the "star" field.
func (fu *FilmUpdate) ClearStar() *FilmUpdate {
	fu.mutation.ClearStar()
	return fu
}

// SetAttackRating sets the "attack_rating" field.
func (fu *FilmUpdate) SetAttackRating(f float64) *FilmUpdate {
	fu.mutation.ResetAttackRating()
	fu.mutation.SetAttackRating(f)
	return fu
}

// SetNillableAttackRating sets the "attack_rating" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableAttackRating(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetAttackRating(*f)
	}
	return fu
}

// AddAttackRating adds f to the "attack_rating" field.
func (fu *FilmUpdate) AddAttackRating(f float64) *FilmUpdate {
	fu.mutation.AddAttackRating(f)
	return fu
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (fu *FilmUpdate) ClearAttackRating() *FilmUpdate {
	fu.mutation.ClearAttackRating()
	return fu
}

// SetMidfieldRating sets the "midfield_rating" field.
func (fu *FilmUpdate) SetMidfieldRating(f float64) *FilmUpdate {
	fu.mutation.ResetMidfieldRating()
	fu.mutation.SetMidfieldRating(f)
	return fu
}

// SetNillableMidfieldRating sets the "midfield_rating" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableMidfieldRating(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetMidfieldRating(*f)
	}
	return fu
}

// AddMidfieldRating adds f to the "midfield_rating" field.
func (fu *FilmUpdate) AddMidfieldRating(f float64) *FilmUpdate {
	fu.mutation.AddMidfieldRating(f)
	return fu
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (fu *FilmUpdate) ClearMidfieldRating() *FilmUpdate {
	fu.mutation.ClearMidfieldRating()
	return fu
}

// SetDefenceRating sets the "defence_rating" field.
func (fu *FilmUpdate) SetDefenceRating(f float64) *FilmUpdate {
	fu.mutation.ResetDefenceRating()
	fu.mutation.SetDefenceRating(f)
	return fu
}

// SetNillableDefenceRating sets the "defence_rating" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableDefenceRating(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetDefenceRating(*f)
	}
	return fu
}

// AddDefenceRating adds f to the "defence_rating" field.
func (fu *FilmUpdate) AddDefenceRating(f float64) *FilmUpdate {
	fu.mutation.AddDefenceRating(f)
	return fu
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (fu *FilmUpdate) ClearDefenceRating() *FilmUpdate {
	fu.mutation.ClearDefenceRating()
	return fu
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (fu *FilmUpdate) SetGoalkeeperRating(f float64) *FilmUpdate {
	fu.mutation.ResetGoalkeeperRating()
	fu.mutation.SetGoalkeeperRating(f)
	return fu
}

// SetNillableGoalkeeperRating sets the "goalkeeper_rating" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableGoalkeeperRating(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetGoalkeeperRating(*f)
	}
	return fu
}

// AddGoalkeeperRating adds f to the "goalkeeper_rating" field.
func (fu *FilmUpdate) AddGoalkeeperRating(f float64) *FilmUpdate {
	fu.mutation.AddGoalkeeperRating(f)
	return fu
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (fu *FilmUpdate) ClearGoalkeeperRating() *FilmUpdate {
	fu.mutation.ClearGoalkeeperRating()
	return fu
}

// SetOverallRating sets the "overall_rating" field.
func (fu *FilmUpdate) SetOverallRating(f float64) *FilmUpdate {
	fu.mutation.ResetOverallRating()
	fu.mutation.SetOverallRating(f)
	return fu
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableOverallRating(f *float64) *FilmUpdate {
	if f != nil {
		fu.SetOverallRating(*f)
	}
	return fu
}

// AddOverallRating adds f to the "overall_rating" field.
func (fu *FilmUpdate) AddOverallRating(f float64) *FilmUpdate {
	fu.mutation.AddOverallRating(f)
	return fu
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (fu *FilmUpdate) ClearOverallRating() *FilmUpdate {
	fu.mutation.ClearOverallRating()
	return fu
}

// SetLogoURL sets the "logo_url" field.
func (fu *FilmUpdate) SetLogoURL(s string) *FilmUpdate {
	fu.mutation.SetLogoURL(s)
	return fu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableLogoURL(s *string) *FilmUpdate {
	if s != nil {
		fu.SetLogoURL(*s)
	}
	return fu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (fu *FilmUpdate) ClearLogoURL() *FilmUpdate {
	fu.mutation.ClearLogoURL()
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FilmUpdate) SetCreatedAt(t time.Time) *FilmUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FilmUpdate) SetNillableCreatedAt(t *time.Time) *FilmUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetAuthor sets the "author" edge to the User entity.
func (fu *FilmUpdate) SetAuthor(u *User) *FilmUpdate {
	return fu.SetAuthorID(u.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (fu *FilmUpdate) SetManager(u *User) *FilmUpdate {
	return fu.SetManagerID(u.ID)
}

// Mutation returns the FilmMutation object of the builder.
func (fu *FilmUpdate) Mutation() *FilmMutation {
	return fu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (fu *FilmUpdate) ClearAuthor() *FilmUpdate {
	fu.mutation.ClearAuthor()
	return fu
}

// ClearManager clears the "manager" edge to the User entity.
func (fu *FilmUpdate) ClearManager() *FilmUpdate {
	fu.mutation.ClearManager()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilmUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilmUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilmUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilmUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FilmUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FilmUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FilmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(film.Table, film.Columns, sqlgraph.NewFieldSpec(film.FieldID, field.TypeInt64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(film.FieldName, field.TypeString, value)
	}
	if fu.mutation.NameCleared() {
		_spec.ClearField(film.FieldName, field.TypeString)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(film.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(film.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.StadiumID(); ok {
		_spec.SetField(film.FieldStadiumID, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedStadiumID(); ok {
		_spec.AddField(film.FieldStadiumID, field.TypeInt64, value)
	}
	if fu.mutation.StadiumIDCleared() {
		_spec.ClearField(film.FieldStadiumID, field.TypeInt64)
	}
	if value, ok := fu.mutation.Star(); ok {
		_spec.SetField(film.FieldStar, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedStar(); ok {
		_spec.AddField(film.FieldStar, field.TypeFloat64, value)
	}
	if fu.mutation.StarCleared() {
		_spec.ClearField(film.FieldStar, field.TypeFloat64)
	}
	if value, ok := fu.mutation.AttackRating(); ok {
		_spec.SetField(film.FieldAttackRating, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedAttackRating(); ok {
		_spec.AddField(film.FieldAttackRating, field.TypeFloat64, value)
	}
	if fu.mutation.AttackRatingCleared() {
		_spec.ClearField(film.FieldAttackRating, field.TypeFloat64)
	}
	if value, ok := fu.mutation.MidfieldRating(); ok {
		_spec.SetField(film.FieldMidfieldRating, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedMidfieldRating(); ok {
		_spec.AddField(film.FieldMidfieldRating, field.TypeFloat64, value)
	}
	if fu.mutation.MidfieldRatingCleared() {
		_spec.ClearField(film.FieldMidfieldRating, field.TypeFloat64)
	}
	if value, ok := fu.mutation.DefenceRating(); ok {
		_spec.SetField(film.FieldDefenceRating, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedDefenceRating(); ok {
		_spec.AddField(film.FieldDefenceRating, field.TypeFloat64, value)
	}
	if fu.mutation.DefenceRatingCleared() {
		_spec.ClearField(film.FieldDefenceRating, field.TypeFloat64)
	}
	if value, ok := fu.mutation.GoalkeeperRating(); ok {
		_spec.SetField(film.FieldGoalkeeperRating, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedGoalkeeperRating(); ok {
		_spec.AddField(film.FieldGoalkeeperRating, field.TypeFloat64, value)
	}
	if fu.mutation.GoalkeeperRatingCleared() {
		_spec.ClearField(film.FieldGoalkeeperRating, field.TypeFloat64)
	}
	if value, ok := fu.mutation.OverallRating(); ok {
		_spec.SetField(film.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedOverallRating(); ok {
		_spec.AddField(film.FieldOverallRating, field.TypeFloat64, value)
	}
	if fu.mutation.OverallRatingCleared() {
		_spec.ClearField(film.FieldOverallRating, field.TypeFloat64)
	}
	if value, ok := fu.mutation.LogoURL(); ok {
		_spec.SetField(film.FieldLogoURL, field.TypeString, value)
	}
	if fu.mutation.LogoURLCleared() {
		_spec.ClearField(film.FieldLogoURL, field.TypeString)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(film.FieldCreatedAt, field.TypeTime, value)
	}
	if fu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FilmUpdateOne is the builder for updating a single Film entity.
type FilmUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FilmMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (fuo *FilmUpdateOne) SetName(s string) *FilmUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableName(s *string) *FilmUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FilmUpdateOne) ClearName() *FilmUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FilmUpdateOne) SetDescription(s string) *FilmUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableDescription(s *string) *FilmUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FilmUpdateOne) ClearDescription() *FilmUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetAuthorID sets the "author_id" field.
func (fuo *FilmUpdateOne) SetAuthorID(i int64) *FilmUpdateOne {
	fuo.mutation.SetAuthorID(i)
	return fuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableAuthorID(i *int64) *FilmUpdateOne {
	if i != nil {
		fuo.SetAuthorID(*i)
	}
	return fuo
}

// ClearAuthorID clears the value of the "author_id" field.
func (fuo *FilmUpdateOne) ClearAuthorID() *FilmUpdateOne {
	fuo.mutation.ClearAuthorID()
	return fuo
}

// SetManagerID sets the "manager_id" field.
func (fuo *FilmUpdateOne) SetManagerID(i int64) *FilmUpdateOne {
	fuo.mutation.SetManagerID(i)
	return fuo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableManagerID(i *int64) *FilmUpdateOne {
	if i != nil {
		fuo.SetManagerID(*i)
	}
	return fuo
}

// ClearManagerID clears the value of the "manager_id" field.
func (fuo *FilmUpdateOne) ClearManagerID() *FilmUpdateOne {
	fuo.mutation.ClearManagerID()
	return fuo
}

// SetStadiumID sets the "stadium_id" field.
func (fuo *FilmUpdateOne) SetStadiumID(i int64) *FilmUpdateOne {
	fuo.mutation.ResetStadiumID()
	fuo.mutation.SetStadiumID(i)
	return fuo
}

// SetNillableStadiumID sets the "stadium_id" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableStadiumID(i *int64) *FilmUpdateOne {
	if i != nil {
		fuo.SetStadiumID(*i)
	}
	return fuo
}

// AddStadiumID adds i to the "stadium_id" field.
func (fuo *FilmUpdateOne) AddStadiumID(i int64) *FilmUpdateOne {
	fuo.mutation.AddStadiumID(i)
	return fuo
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (fuo *FilmUpdateOne) ClearStadiumID() *FilmUpdateOne {
	fuo.mutation.ClearStadiumID()
	return fuo
}

// SetStar sets the "star" field.
func (fuo *FilmUpdateOne) SetStar(f float64) *FilmUpdateOne {
	fuo.mutation.ResetStar()
	fuo.mutation.SetStar(f)
	return fuo
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableStar(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetStar(*f)
	}
	return fuo
}

// AddStar adds f to the "star" field.
func (fuo *FilmUpdateOne) AddStar(f float64) *FilmUpdateOne {
	fuo.mutation.AddStar(f)
	return fuo
}

// ClearStar clears the value of the "star" field.
func (fuo *FilmUpdateOne) ClearStar() *FilmUpdateOne {
	fuo.mutation.ClearStar()
	return fuo
}

// SetAttackRating sets the "attack_rating" field.
func (fuo *FilmUpdateOne) SetAttackRating(f float64) *FilmUpdateOne {
	fuo.mutation.ResetAttackRating()
	fuo.mutation.SetAttackRating(f)
	return fuo
}

// SetNillableAttackRating sets the "attack_rating" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableAttackRating(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetAttackRating(*f)
	}
	return fuo
}

// AddAttackRating adds f to the "attack_rating" field.
func (fuo *FilmUpdateOne) AddAttackRating(f float64) *FilmUpdateOne {
	fuo.mutation.AddAttackRating(f)
	return fuo
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (fuo *FilmUpdateOne) ClearAttackRating() *FilmUpdateOne {
	fuo.mutation.ClearAttackRating()
	return fuo
}

// SetMidfieldRating sets the "midfield_rating" field.
func (fuo *FilmUpdateOne) SetMidfieldRating(f float64) *FilmUpdateOne {
	fuo.mutation.ResetMidfieldRating()
	fuo.mutation.SetMidfieldRating(f)
	return fuo
}

// SetNillableMidfieldRating sets the "midfield_rating" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableMidfieldRating(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetMidfieldRating(*f)
	}
	return fuo
}

// AddMidfieldRating adds f to the "midfield_rating" field.
func (fuo *FilmUpdateOne) AddMidfieldRating(f float64) *FilmUpdateOne {
	fuo.mutation.AddMidfieldRating(f)
	return fuo
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (fuo *FilmUpdateOne) ClearMidfieldRating() *FilmUpdateOne {
	fuo.mutation.ClearMidfieldRating()
	return fuo
}

// SetDefenceRating sets the "defence_rating" field.
func (fuo *FilmUpdateOne) SetDefenceRating(f float64) *FilmUpdateOne {
	fuo.mutation.ResetDefenceRating()
	fuo.mutation.SetDefenceRating(f)
	return fuo
}

// SetNillableDefenceRating sets the "defence_rating" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableDefenceRating(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetDefenceRating(*f)
	}
	return fuo
}

// AddDefenceRating adds f to the "defence_rating" field.
func (fuo *FilmUpdateOne) AddDefenceRating(f float64) *FilmUpdateOne {
	fuo.mutation.AddDefenceRating(f)
	return fuo
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (fuo *FilmUpdateOne) ClearDefenceRating() *FilmUpdateOne {
	fuo.mutation.ClearDefenceRating()
	return fuo
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (fuo *FilmUpdateOne) SetGoalkeeperRating(f float64) *FilmUpdateOne {
	fuo.mutation.ResetGoalkeeperRating()
	fuo.mutation.SetGoalkeeperRating(f)
	return fuo
}

// SetNillableGoalkeeperRating sets the "goalkeeper_rating" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableGoalkeeperRating(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetGoalkeeperRating(*f)
	}
	return fuo
}

// AddGoalkeeperRating adds f to the "goalkeeper_rating" field.
func (fuo *FilmUpdateOne) AddGoalkeeperRating(f float64) *FilmUpdateOne {
	fuo.mutation.AddGoalkeeperRating(f)
	return fuo
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (fuo *FilmUpdateOne) ClearGoalkeeperRating() *FilmUpdateOne {
	fuo.mutation.ClearGoalkeeperRating()
	return fuo
}

// SetOverallRating sets the "overall_rating" field.
func (fuo *FilmUpdateOne) SetOverallRating(f float64) *FilmUpdateOne {
	fuo.mutation.ResetOverallRating()
	fuo.mutation.SetOverallRating(f)
	return fuo
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableOverallRating(f *float64) *FilmUpdateOne {
	if f != nil {
		fuo.SetOverallRating(*f)
	}
	return fuo
}

// AddOverallRating adds f to the "overall_rating" field.
func (fuo *FilmUpdateOne) AddOverallRating(f float64) *FilmUpdateOne {
	fuo.mutation.AddOverallRating(f)
	return fuo
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (fuo *FilmUpdateOne) ClearOverallRating() *FilmUpdateOne {
	fuo.mutation.ClearOverallRating()
	return fuo
}

// SetLogoURL sets the "logo_url" field.
func (fuo *FilmUpdateOne) SetLogoURL(s string) *FilmUpdateOne {
	fuo.mutation.SetLogoURL(s)
	return fuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableLogoURL(s *string) *FilmUpdateOne {
	if s != nil {
		fuo.SetLogoURL(*s)
	}
	return fuo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (fuo *FilmUpdateOne) ClearLogoURL() *FilmUpdateOne {
	fuo.mutation.ClearLogoURL()
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FilmUpdateOne) SetCreatedAt(t time.Time) *FilmUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FilmUpdateOne) SetNillableCreatedAt(t *time.Time) *FilmUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetAuthor sets the "author" edge to the User entity.
func (fuo *FilmUpdateOne) SetAuthor(u *User) *FilmUpdateOne {
	return fuo.SetAuthorID(u.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (fuo *FilmUpdateOne) SetManager(u *User) *FilmUpdateOne {
	return fuo.SetManagerID(u.ID)
}

// Mutation returns the FilmMutation object of the builder.
func (fuo *FilmUpdateOne) Mutation() *FilmMutation {
	return fuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (fuo *FilmUpdateOne) ClearAuthor() *FilmUpdateOne {
	fuo.mutation.ClearAuthor()
	return fuo
}

// ClearManager clears the "manager" edge to the User entity.
func (fuo *FilmUpdateOne) ClearManager() *FilmUpdateOne {
	fuo.mutation.ClearManager()
	return fuo
}

// Where appends a list predicates to the FilmUpdate builder.
func (fuo *FilmUpdateOne) Where(ps ...predicate.Film) *FilmUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilmUpdateOne) Select(field string, fields ...string) *FilmUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Film entity.
func (fuo *FilmUpdateOne) Save(ctx context.Context) (*Film, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilmUpdateOne) SaveX(ctx context.Context) *Film {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilmUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilmUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FilmUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FilmUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FilmUpdateOne) sqlSave(ctx context.Context) (_node *Film, err error) {
	_spec := sqlgraph.NewUpdateSpec(film.Table, film.Columns, sqlgraph.NewFieldSpec(film.FieldID, field.TypeInt64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Film.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, film.FieldID)
		for _, f := range fields {
			if !film.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != film.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(film.FieldName, field.TypeString, value)
	}
	if fuo.mutation.NameCleared() {
		_spec.ClearField(film.FieldName, field.TypeString)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(film.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(film.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.StadiumID(); ok {
		_spec.SetField(film.FieldStadiumID, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedStadiumID(); ok {
		_spec.AddField(film.FieldStadiumID, field.TypeInt64, value)
	}
	if fuo.mutation.StadiumIDCleared() {
		_spec.ClearField(film.FieldStadiumID, field.TypeInt64)
	}
	if value, ok := fuo.mutation.Star(); ok {
		_spec.SetField(film.FieldStar, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedStar(); ok {
		_spec.AddField(film.FieldStar, field.TypeFloat64, value)
	}
	if fuo.mutation.StarCleared() {
		_spec.ClearField(film.FieldStar, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.AttackRating(); ok {
		_spec.SetField(film.FieldAttackRating, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedAttackRating(); ok {
		_spec.AddField(film.FieldAttackRating, field.TypeFloat64, value)
	}
	if fuo.mutation.AttackRatingCleared() {
		_spec.ClearField(film.FieldAttackRating, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.MidfieldRating(); ok {
		_spec.SetField(film.FieldMidfieldRating, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedMidfieldRating(); ok {
		_spec.AddField(film.FieldMidfieldRating, field.TypeFloat64, value)
	}
	if fuo.mutation.MidfieldRatingCleared() {
		_spec.ClearField(film.FieldMidfieldRating, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.DefenceRating(); ok {
		_spec.SetField(film.FieldDefenceRating, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedDefenceRating(); ok {
		_spec.AddField(film.FieldDefenceRating, field.TypeFloat64, value)
	}
	if fuo.mutation.DefenceRatingCleared() {
		_spec.ClearField(film.FieldDefenceRating, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.GoalkeeperRating(); ok {
		_spec.SetField(film.FieldGoalkeeperRating, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedGoalkeeperRating(); ok {
		_spec.AddField(film.FieldGoalkeeperRating, field.TypeFloat64, value)
	}
	if fuo.mutation.GoalkeeperRatingCleared() {
		_spec.ClearField(film.FieldGoalkeeperRating, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.OverallRating(); ok {
		_spec.SetField(film.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedOverallRating(); ok {
		_spec.AddField(film.FieldOverallRating, field.TypeFloat64, value)
	}
	if fuo.mutation.OverallRatingCleared() {
		_spec.ClearField(film.FieldOverallRating, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.LogoURL(); ok {
		_spec.SetField(film.FieldLogoURL, field.TypeString, value)
	}
	if fuo.mutation.LogoURLCleared() {
		_spec.ClearField(film.FieldLogoURL, field.TypeString)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(film.FieldCreatedAt, field.TypeTime, value)
	}
	if fuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Film{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{film.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
