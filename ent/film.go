// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kinokz/ent/film"
	"kinokz/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Film is the model entity for the Film schema.
type Film struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID int64 `json:"author_id,omitempty"`
	// ManagerID holds the value of the "manager_id" field.
	ManagerID int64 `json:"manager_id,omitempty"`
	// StadiumID holds the value of the "stadium_id" field.
	StadiumID *int64 `json:"stadium_id,omitempty"`
	// Star holds the value of the "star" field.
	Star *float64 `json:"star,omitempty"`
	// AttackRating holds the value of the "attack_rating" field.
	AttackRating *float64 `json:"attack_rating,omitempty"`
	// MidfieldRating holds the value of the "midfield_rating" field.
	MidfieldRating *float64 `json:"midfield_rating,omitempty"`
	// DefenceRating holds the value of the "defence_rating" field.
	DefenceRating *float64 `json:"defence_rating,omitempty"`
	// GoalkeeperRating holds the value of the "goalkeeper_rating" field.
	GoalkeeperRating *float64 `json:"goalkeeper_rating,omitempty"`
	// OverallRating holds the value of the "overall_rating" field.
	OverallRating *float64 `json:"overall_rating,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilmQuery when eager-loading is set.
	Edges        FilmEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FilmEdges holds the relations/edges for other nodes in the graph.
type FilmEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Manager holds the value of the manager edge.
	Manager *User `json:"manager,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilmEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ManagerOrErr returns the Manager value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilmEdges) ManagerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Manager == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Manager, nil
	}
	return nil, &NotLoadedError{edge: "manager"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Film) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case film.FieldStar, film.FieldAttackRating, film.FieldMidfieldRating, film.FieldDefenceRating, film.FieldGoalkeeperRating, film.FieldOverallRating:
			values[i] = new(sql.NullFloat64)
		case film.FieldID, film.FieldAuthorID, film.FieldManagerID, film.FieldStadiumID:
			values[i] = new(sql.NullInt64)
		case film.FieldName, film.FieldDescription, film.FieldLogoURL:
			values[i] = new(sql.NullString)
		case film.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Film fields.
func (f *Film) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case film.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int64(value.Int64)
		case film.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case film.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case film.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				f.AuthorID = value.Int64
			}
		case film.FieldManagerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field manager_id", values[i])
			} else if value.Valid {
				f.ManagerID = value.Int64
			}
		case film.FieldStadiumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stadium_id", values[i])
			} else if value.Valid {
				f.StadiumID = new(int64)
				*f.StadiumID = value.Int64
			}
		case film.FieldStar:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field star", values[i])
			} else if value.Valid {
				f.Star = new(float64)
				*f.Star = value.Float64
			}
		case film.FieldAttackRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field attack_rating", values[i])
			} else if value.Valid {
				f.AttackRating = new(float64)
				*f.AttackRating = value.Float64
			}
		case film.FieldMidfieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field midfield_rating", values[i])
			} else if value.Valid {
				f.MidfieldRating = new(float64)
				*f.MidfieldRating = value.Float64
			}
		case film.FieldDefenceRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field defence_rating", values[i])
			} else if value.Valid {
				f.DefenceRating = new(float64)
				*f.DefenceRating = value.Float64
			}
		case film.FieldGoalkeeperRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field goalkeeper_rating", values[i])
			} else if value.Valid {
				f.GoalkeeperRating = new(float64)
				*f.GoalkeeperRating = value.Float64
			}
		case film.FieldOverallRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field overall_rating", values[i])
			} else if value.Valid {
				f.OverallRating = new(float64)
				*f.OverallRating = value.Float64
			}
		case film.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				f.LogoURL = value.String
			}
		case film.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Film.
// This includes values selected through modifiers, order, etc.
func (f *Film) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Film entity.
func (f *Film) QueryAuthor() *UserQuery {
	return NewFilmClient(f.config).QueryAuthor(f)
}

// QueryManager queries the "manager" edge of the Film entity.
func (f *Film) QueryManager() *UserQuery {
	return NewFilmClient(f.config).QueryManager(f)
}

// Update returns a builder for updating this Film.
// Note that you need to call Film.Unwrap() before calling this method if this Film
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Film) Update() *FilmUpdateOne {
	return NewFilmClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Film entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Film) Unwrap() *Film {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Film is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Film) String() string {
	var builder strings.Builder
	builder.WriteString("Film(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", f.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("manager_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ManagerID))
	builder.WriteString(", ")
	if v := f.StadiumID; v != nil {
		builder.WriteString("stadium_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.Star; v != nil {
		builder.WriteString("star=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.AttackRating; v != nil {
		builder.WriteString("attack_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.MidfieldRating; v != nil {
		builder.WriteString("midfield_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.DefenceRating; v != nil {
		builder.WriteString("defence_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.GoalkeeperRating; v != nil {
		builder.WriteString("goalkeeper_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.OverallRating; v != nil {
		builder.WriteString("overall_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(f.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Films is a parsable slice of Film.
type Films []*Film
