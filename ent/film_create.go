// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kinokz/ent/film"
	"kinokz/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilmCreate is the builder for creating a Film entity.
type FilmCreate struct {
	config
	mutation *FilmMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (fc *FilmCreate) SetName(s string) *FilmCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fc *FilmCreate) SetNillableName(s *string) *FilmCreate {
	if s != nil {
		fc.SetName(*s)
	}
	return fc
}

// SetDescription sets the "description" field.
func (fc *FilmCreate) SetDescription(s string) *FilmCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *FilmCreate) SetNillableDescription(s *string) *FilmCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetAuthorID sets the "author_id" field.
func (fc *FilmCreate) SetAuthorID(i int64) *FilmCreate {
	fc.mutation.SetAuthorID(i)
	return fc
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (fc *FilmCreate) SetNillableAuthorID(i *int64) *FilmCreate {
	if i != nil {
		fc.SetAuthorID(*i)
	}
	return fc
}

// SetManagerID sets the "manager_id" field.
func (fc *FilmCreate) SetManagerID(i int64) *FilmCreate {
	fc.mutation.SetManagerID(i)
	return fc
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (fc *FilmCreate) SetNillableManagerID(i *int64) *FilmCreate {
	if i != nil {
		fc.SetManagerID(*i)
	}
	return fc
}

// SetStadiumID sets the "stadium_id" field.
func (fc *FilmCreate) SetStadiumID(i int64) *FilmCreate {
	fc.mutation.SetStadiumID(i)
	return fc
}

// SetNillableStadiumID sets the "stadium_id" field if the given value is not nil.
func (fc *FilmCreate) SetNillableStadiumID(i *int64) *FilmCreate {
	if i != nil {
		fc.SetStadiumID(*i)
	}
	return fc
}

// SetStar sets the "star" field.
func (fc *FilmCreate) SetStar(f float64) *FilmCreate {
	fc.mutation.SetStar(f)
	return fc
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (fc *FilmCreate) SetNillableStar(f *float64) *FilmCreate {
	if f != nil {
		fc.SetStar(*f)
	}
	return fc
}

// SetAttackRating sets the "attack_rating" field.
func (fc *FilmCreate) SetAttackRating(f float64) *FilmCreate {
	fc.mutation.SetAttackRating(f)
	return fc
}

// SetNillableAttackRating sets the "attack_rating" field if the given value is not nil.
func (fc *FilmCreate) SetNillableAttackRating(f *float64) *FilmCreate {
	if f != nil {
		fc.SetAttackRating(*f)
	}
	return fc
}

// SetMidfieldRating sets the "midfield_rating" field.
func (fc *FilmCreate) SetMidfieldRating(f float64) *FilmCreate {
	fc.mutation.SetMidfieldRating(f)
	return fc
}

// SetNillableMidfieldRating sets the "midfield_rating" field if the given value is not nil.
func (fc *FilmCreate) SetNillableMidfieldRating(f *float64) *FilmCreate {
	if f != nil {
		fc.SetMidfieldRating(*f)
	}
	return fc
}

// SetDefenceRating sets the "defence_rating" field.
func (fc *FilmCreate) SetDefenceRating(f float64) *FilmCreate {
	fc.mutation.SetDefenceRating(f)
	return fc
}

// SetNillableDefenceRating sets the "defence_rating" field if the given value is not nil.
func (fc *FilmCreate) SetNillableDefenceRating(f *float64) *FilmCreate {
	if f != nil {
		fc.SetDefenceRating(*f)
	}
	return fc
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (fc *FilmCreate) SetGoalkeeperRating(f float64) *FilmCreate {
	fc.mutation.SetGoalkeeperRating(f)
	return fc
}

// SetNillableGoalkeeperRating sets the "goalkeeper_rating" field if the given value is not nil.
func (fc *FilmCreate) SetNillableGoalkeeperRating(f *float64) *FilmCreate {
	if f != nil {
		fc.SetGoalkeeperRating(*f)
	}
	return fc
}

// SetOverallRating sets the "overall_rating" field.
func (fc *FilmCreate) SetOverallRating(f float64) *FilmCreate {
	fc.mutation.SetOverallRating(f)
	return fc
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (fc *FilmCreate) SetNillableOverallRating(f *float64) *FilmCreate {
	if f != nil {
		fc.SetOverallRating(*f)
	}
	return fc
}

// SetLogoURL sets the "logo_url" field.
func (fc *FilmCreate) SetLogoURL(s string) *FilmCreate {
	fc.mutation.SetLogoURL(s)
	return fc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (fc *FilmCreate) SetNillableLogoURL(s *string) *FilmCreate {
	if s != nil {
		fc.SetLogoURL(*s)
	}
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FilmCreate) SetCreatedAt(t time.Time) *FilmCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FilmCreate) SetNillableCreatedAt(t *time.Time) *FilmCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FilmCreate) SetID(i int64) *FilmCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetAuthor sets the "author" edge to the User entity.
func (fc *FilmCreate) SetAuthor(u *User) *FilmCreate {
	return fc.SetAuthorID(u.ID)
}

// SetManager sets the "manager" edge to the User entity.
func (fc *FilmCreate) SetManager(u *User) *FilmCreate {
	return fc.SetManagerID(u.ID)
}

// Mutation returns the FilmMutation object of the builder.
func (fc *FilmCreate) Mutation() *FilmMutation {
	return fc.mutation
}

// Save creates the Film in the database.
func (fc *FilmCreate) Save(ctx context.Context) (*Film, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilmCreate) SaveX(ctx context.Context) *Film {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilmCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilmCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FilmCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := film.DefaultCreatedAt
		fc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilmCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Film.created_at"`)}
	}
	return nil
}

func (fc *FilmCreate) sqlSave(ctx context.Context) (*Film, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FilmCreate) createSpec() (*Film, *sqlgraph.CreateSpec) {
	var (
		_node = &Film{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(film.Table, sqlgraph.NewFieldSpec(film.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(film.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(film.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.StadiumID(); ok {
		_spec.SetField(film.FieldStadiumID, field.TypeInt64, value)
		_node.StadiumID = &value
	}
	if value, ok := fc.mutation.Star(); ok {
		_spec.SetField(film.FieldStar, field.TypeFloat64, value)
		_node.Star = &value
	}
	if value, ok := fc.mutation.AttackRating(); ok {
		_spec.SetField(film.FieldAttackRating, field.TypeFloat64, value)
		_node.AttackRating = &value
	}
	if value, ok := fc.mutation.MidfieldRating(); ok {
		_spec.SetField(film.FieldMidfieldRating, field.TypeFloat64, value)
		_node.MidfieldRating = &value
	}
	if value, ok := fc.mutation.DefenceRating(); ok {
		_spec.SetField(film.FieldDefenceRating, field.TypeFloat64, value)
		_node.DefenceRating = &value
	}
	if value, ok := fc.mutation.GoalkeeperRating(); ok {
		_spec.SetField(film.FieldGoalkeeperRating, field.TypeFloat64, value)
		_node.GoalkeeperRating = &value
	}
	if value, ok := fc.mutation.OverallRating(); ok {
		_spec.SetField(film.FieldOverallRating, field.TypeFloat64, value)
		_node.OverallRating = &value
	}
	if value, ok := fc.mutation.LogoURL(); ok {
		_spec.SetField(film.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(film.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := fc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ManagerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Film.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilmUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fc *FilmCreate) OnConflict(opts ...sql.ConflictOption) *FilmUpsertOne {
	fc.conflict = opts
	return &FilmUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Film.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FilmCreate) OnConflictColumns(columns ...string) *FilmUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FilmUpsertOne{
		create: fc,
	}
}

type (
	// FilmUpsertOne is the builder for "upsert"-ing
	//  one Film node.
	FilmUpsertOne struct {
		create *FilmCreate
	}

	// FilmUpsert is the "OnConflict" setter.
	FilmUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *FilmUpsert) SetName(v string) *FilmUpsert {
	u.Set(film.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilmUpsert) UpdateName() *FilmUpsert {
	u.SetExcluded(film.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *FilmUpsert) ClearName() *FilmUpsert {
	u.SetNull(film.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *FilmUpsert) SetDescription(v string) *FilmUpsert {
	u.Set(film.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FilmUpsert) UpdateDescription() *FilmUpsert {
	u.SetExcluded(film.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *FilmUpsert) ClearDescription() *FilmUpsert {
	u.SetNull(film.FieldDescription)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *FilmUpsert) SetAuthorID(v int64) *FilmUpsert {
	u.Set(film.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *FilmUpsert) UpdateAuthorID() *FilmUpsert {
	u.SetExcluded(film.FieldAuthorID)
	return u
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *FilmUpsert) ClearAuthorID() *FilmUpsert {
	u.SetNull(film.FieldAuthorID)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *FilmUpsert) SetManagerID(v int64) *FilmUpsert {
	u.Set(film.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FilmUpsert) UpdateManagerID() *FilmUpsert {
	u.SetExcluded(film.FieldManagerID)
	return u
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FilmUpsert) ClearManagerID() *FilmUpsert {
	u.SetNull(film.FieldManagerID)
	return u
}

// SetStadiumID sets the "stadium_id" field.
func (u *FilmUpsert) SetStadiumID(v int64) *FilmUpsert {
	u.Set(film.FieldStadiumID, v)
	return u
}

// UpdateStadiumID sets the "stadium_id" field to the value that was provided on create.
func (u *FilmUpsert) UpdateStadiumID() *FilmUpsert {
	u.SetExcluded(film.FieldStadiumID)
	return u
}

// AddStadiumID adds v to the "stadium_id" field.
func (u *FilmUpsert) AddStadiumID(v int64) *FilmUpsert {
	u.Add(film.FieldStadiumID, v)
	return u
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (u *FilmUpsert) ClearStadiumID() *FilmUpsert {
	u.SetNull(film.FieldStadiumID)
	return u
}

// SetStar sets the "star" field.
func (u *FilmUpsert) SetStar(v float64) *FilmUpsert {
	u.Set(film.FieldStar, v)
	return u
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *FilmUpsert) UpdateStar() *FilmUpsert {
	u.SetExcluded(film.FieldStar)
	return u
}

// AddStar adds v to the "star" field.
func (u *FilmUpsert) AddStar(v float64) *FilmUpsert {
	u.Add(film.FieldStar, v)
	return u
}

// ClearStar clears the value of the "star" field.
func (u *FilmUpsert) ClearStar() *FilmUpsert {
	u.SetNull(film.FieldStar)
	return u
}

// SetAttackRating sets the "attack_rating" field.
func (u *FilmUpsert) SetAttackRating(v float64) *FilmUpsert {
	u.Set(film.FieldAttackRating, v)
	return u
}

// UpdateAttackRating sets the "attack_rating" field to the value that was provided on create.
func (u *FilmUpsert) UpdateAttackRating() *FilmUpsert {
	u.SetExcluded(film.FieldAttackRating)
	return u
}

// AddAttackRating adds v to the "attack_rating" field.
func (u *FilmUpsert) AddAttackRating(v float64) *FilmUpsert {
	u.Add(film.FieldAttackRating, v)
	return u
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (u *FilmUpsert) ClearAttackRating() *FilmUpsert {
	u.SetNull(film.FieldAttackRating)
	return u
}

// SetMidfieldRating sets the "midfield_rating" field.
func (u *FilmUpsert) SetMidfieldRating(v float64) *FilmUpsert {
	u.Set(film.FieldMidfieldRating, v)
	return u
}

// UpdateMidfieldRating sets the "midfield_rating" field to the value that was provided on create.
func (u *FilmUpsert) UpdateMidfieldRating() *FilmUpsert {
	u.SetExcluded(film.FieldMidfieldRating)
	return u
}

// AddMidfieldRating adds v to the "midfield_rating" field.
func (u *FilmUpsert) AddMidfieldRating(v float64) *FilmUpsert {
	u.Add(film.FieldMidfieldRating, v)
	return u
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (u *FilmUpsert) ClearMidfieldRating() *FilmUpsert {
	u.SetNull(film.FieldMidfieldRating)
	return u
}

// SetDefenceRating sets the "defence_rating" field.
func (u *FilmUpsert) SetDefenceRating(v float64) *FilmUpsert {
	u.Set(film.FieldDefenceRating, v)
	return u
}

// UpdateDefenceRating sets the "defence_rating" field to the value that was provided on create.
func (u *FilmUpsert) UpdateDefenceRating() *FilmUpsert {
	u.SetExcluded(film.FieldDefenceRating)
	return u
}

// AddDefenceRating adds v to the "defence_rating" field.
func (u *FilmUpsert) AddDefenceRating(v float64) *FilmUpsert {
	u.Add(film.FieldDefenceRating, v)
	return u
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (u *FilmUpsert) ClearDefenceRating() *FilmUpsert {
	u.SetNull(film.FieldDefenceRating)
	return u
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (u *FilmUpsert) SetGoalkeeperRating(v float64) *FilmUpsert {
	u.Set(film.FieldGoalkeeperRating, v)
	return u
}

// UpdateGoalkeeperRating sets the "goalkeeper_rating" field to the value that was provided on create.
func (u *FilmUpsert) UpdateGoalkeeperRating() *FilmUpsert {
	u.SetExcluded(film.FieldGoalkeeperRating)
	return u
}

// AddGoalkeeperRating adds v to the "goalkeeper_rating" field.
func (u *FilmUpsert) AddGoalkeeperRating(v float64) *FilmUpsert {
	u.Add(film.FieldGoalkeeperRating, v)
	return u
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (u *FilmUpsert) ClearGoalkeeperRating() *FilmUpsert {
	u.SetNull(film.FieldGoalkeeperRating)
	return u
}

// SetOverallRating sets the "overall_rating" field.
func (u *FilmUpsert) SetOverallRating(v float64) *FilmUpsert {
	u.Set(film.FieldOverallRating, v)
	return u
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *FilmUpsert) UpdateOverallRating() *FilmUpsert {
	u.SetExcluded(film.FieldOverallRating)
	return u
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *FilmUpsert) AddOverallRating(v float64) *FilmUpsert {
	u.Add(film.FieldOverallRating, v)
	return u
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *FilmUpsert) ClearOverallRating() *FilmUpsert {
	u.SetNull(film.FieldOverallRating)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *FilmUpsert) SetLogoURL(v string) *FilmUpsert {
	u.Set(film.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *FilmUpsert) UpdateLogoURL() *FilmUpsert {
	u.SetExcluded(film.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *FilmUpsert) ClearLogoURL() *FilmUpsert {
	u.SetNull(film.FieldLogoURL)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FilmUpsert) SetCreatedAt(v time.Time) *FilmUpsert {
	u.Set(film.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FilmUpsert) UpdateCreatedAt() *FilmUpsert {
	u.SetExcluded(film.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Film.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(film.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilmUpsertOne) UpdateNewValues() *FilmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(film.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Film.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FilmUpsertOne) Ignore() *FilmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilmUpsertOne) DoNothing() *FilmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilmCreate.OnConflict
// documentation for more info.
func (u *FilmUpsertOne) Update(set func(*FilmUpsert)) *FilmUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilmUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FilmUpsertOne) SetName(v string) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateName() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FilmUpsertOne) ClearName() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *FilmUpsertOne) SetDescription(v string) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateDescription() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FilmUpsertOne) ClearDescription() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearDescription()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *FilmUpsertOne) SetAuthorID(v int64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateAuthorID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *FilmUpsertOne) ClearAuthorID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearAuthorID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *FilmUpsertOne) SetManagerID(v int64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateManagerID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FilmUpsertOne) ClearManagerID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearManagerID()
	})
}

// SetStadiumID sets the "stadium_id" field.
func (u *FilmUpsertOne) SetStadiumID(v int64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetStadiumID(v)
	})
}

// AddStadiumID adds v to the "stadium_id" field.
func (u *FilmUpsertOne) AddStadiumID(v int64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddStadiumID(v)
	})
}

// UpdateStadiumID sets the "stadium_id" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateStadiumID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateStadiumID()
	})
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (u *FilmUpsertOne) ClearStadiumID() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearStadiumID()
	})
}

// SetStar sets the "star" field.
func (u *FilmUpsertOne) SetStar(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *FilmUpsertOne) AddStar(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateStar() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateStar()
	})
}

// ClearStar clears the value of the "star" field.
func (u *FilmUpsertOne) ClearStar() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearStar()
	})
}

// SetAttackRating sets the "attack_rating" field.
func (u *FilmUpsertOne) SetAttackRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetAttackRating(v)
	})
}

// AddAttackRating adds v to the "attack_rating" field.
func (u *FilmUpsertOne) AddAttackRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddAttackRating(v)
	})
}

// UpdateAttackRating sets the "attack_rating" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateAttackRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateAttackRating()
	})
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (u *FilmUpsertOne) ClearAttackRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearAttackRating()
	})
}

// SetMidfieldRating sets the "midfield_rating" field.
func (u *FilmUpsertOne) SetMidfieldRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetMidfieldRating(v)
	})
}

// AddMidfieldRating adds v to the "midfield_rating" field.
func (u *FilmUpsertOne) AddMidfieldRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddMidfieldRating(v)
	})
}

// UpdateMidfieldRating sets the "midfield_rating" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateMidfieldRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateMidfieldRating()
	})
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (u *FilmUpsertOne) ClearMidfieldRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearMidfieldRating()
	})
}

// SetDefenceRating sets the "defence_rating" field.
func (u *FilmUpsertOne) SetDefenceRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetDefenceRating(v)
	})
}

// AddDefenceRating adds v to the "defence_rating" field.
func (u *FilmUpsertOne) AddDefenceRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddDefenceRating(v)
	})
}

// UpdateDefenceRating sets the "defence_rating" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateDefenceRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateDefenceRating()
	})
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (u *FilmUpsertOne) ClearDefenceRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearDefenceRating()
	})
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (u *FilmUpsertOne) SetGoalkeeperRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetGoalkeeperRating(v)
	})
}

// AddGoalkeeperRating adds v to the "goalkeeper_rating" field.
func (u *FilmUpsertOne) AddGoalkeeperRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddGoalkeeperRating(v)
	})
}

// UpdateGoalkeeperRating sets the "goalkeeper_rating" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateGoalkeeperRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateGoalkeeperRating()
	})
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (u *FilmUpsertOne) ClearGoalkeeperRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearGoalkeeperRating()
	})
}

// SetOverallRating sets the "overall_rating" field.
func (u *FilmUpsertOne) SetOverallRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetOverallRating(v)
	})
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *FilmUpsertOne) AddOverallRating(v float64) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.AddOverallRating(v)
	})
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateOverallRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateOverallRating()
	})
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *FilmUpsertOne) ClearOverallRating() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearOverallRating()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *FilmUpsertOne) SetLogoURL(v string) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateLogoURL() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *FilmUpsertOne) ClearLogoURL() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.ClearLogoURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FilmUpsertOne) SetCreatedAt(v time.Time) *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FilmUpsertOne) UpdateCreatedAt() *FilmUpsertOne {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FilmUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilmCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilmUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FilmUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FilmUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FilmCreateBulk is the builder for creating many Film entities in bulk.
type FilmCreateBulk struct {
	config
	err      error
	builders []*FilmCreate
	conflict []sql.ConflictOption
}

// Save creates the Film entities in the database.
func (fcb *FilmCreateBulk) Save(ctx context.Context) ([]*Film, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Film, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilmMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilmCreateBulk) SaveX(ctx context.Context) []*Film {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilmCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilmCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Film.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FilmUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fcb *FilmCreateBulk) OnConflict(opts ...sql.ConflictOption) *FilmUpsertBulk {
	fcb.conflict = opts
	return &FilmUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Film.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FilmCreateBulk) OnConflictColumns(columns ...string) *FilmUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FilmUpsertBulk{
		create: fcb,
	}
}

// FilmUpsertBulk is the builder for "upsert"-ing
// a bulk of Film nodes.
type FilmUpsertBulk struct {
	create *FilmCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Film.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(film.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FilmUpsertBulk) UpdateNewValues() *FilmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(film.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Film.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FilmUpsertBulk) Ignore() *FilmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FilmUpsertBulk) DoNothing() *FilmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FilmCreateBulk.OnConflict
// documentation for more info.
func (u *FilmUpsertBulk) Update(set func(*FilmUpsert)) *FilmUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FilmUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FilmUpsertBulk) SetName(v string) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateName() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FilmUpsertBulk) ClearName() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *FilmUpsertBulk) SetDescription(v string) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateDescription() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FilmUpsertBulk) ClearDescription() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearDescription()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *FilmUpsertBulk) SetAuthorID(v int64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateAuthorID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *FilmUpsertBulk) ClearAuthorID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearAuthorID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *FilmUpsertBulk) SetManagerID(v int64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateManagerID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateManagerID()
	})
}

// ClearManagerID clears the value of the "manager_id" field.
func (u *FilmUpsertBulk) ClearManagerID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearManagerID()
	})
}

// SetStadiumID sets the "stadium_id" field.
func (u *FilmUpsertBulk) SetStadiumID(v int64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetStadiumID(v)
	})
}

// AddStadiumID adds v to the "stadium_id" field.
func (u *FilmUpsertBulk) AddStadiumID(v int64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddStadiumID(v)
	})
}

// UpdateStadiumID sets the "stadium_id" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateStadiumID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateStadiumID()
	})
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (u *FilmUpsertBulk) ClearStadiumID() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearStadiumID()
	})
}

// SetStar sets the "star" field.
func (u *FilmUpsertBulk) SetStar(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *FilmUpsertBulk) AddStar(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateStar() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateStar()
	})
}

// ClearStar clears the value of the "star" field.
func (u *FilmUpsertBulk) ClearStar() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearStar()
	})
}

// SetAttackRating sets the "attack_rating" field.
func (u *FilmUpsertBulk) SetAttackRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetAttackRating(v)
	})
}

// AddAttackRating adds v to the "attack_rating" field.
func (u *FilmUpsertBulk) AddAttackRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddAttackRating(v)
	})
}

// UpdateAttackRating sets the "attack_rating" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateAttackRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateAttackRating()
	})
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (u *FilmUpsertBulk) ClearAttackRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearAttackRating()
	})
}

// SetMidfieldRating sets the "midfield_rating" field.
func (u *FilmUpsertBulk) SetMidfieldRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetMidfieldRating(v)
	})
}

// AddMidfieldRating adds v to the "midfield_rating" field.
func (u *FilmUpsertBulk) AddMidfieldRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddMidfieldRating(v)
	})
}

// UpdateMidfieldRating sets the "midfield_rating" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateMidfieldRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateMidfieldRating()
	})
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (u *FilmUpsertBulk) ClearMidfieldRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearMidfieldRating()
	})
}

// SetDefenceRating sets the "defence_rating" field.
func (u *FilmUpsertBulk) SetDefenceRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetDefenceRating(v)
	})
}

// AddDefenceRating adds v to the "defence_rating" field.
func (u *FilmUpsertBulk) AddDefenceRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddDefenceRating(v)
	})
}

// UpdateDefenceRating sets the "defence_rating" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateDefenceRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateDefenceRating()
	})
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (u *FilmUpsertBulk) ClearDefenceRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearDefenceRating()
	})
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (u *FilmUpsertBulk) SetGoalkeeperRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetGoalkeeperRating(v)
	})
}

// AddGoalkeeperRating adds v to the "goalkeeper_rating" field.
func (u *FilmUpsertBulk) AddGoalkeeperRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddGoalkeeperRating(v)
	})
}

// UpdateGoalkeeperRating sets the "goalkeeper_rating" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateGoalkeeperRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateGoalkeeperRating()
	})
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (u *FilmUpsertBulk) ClearGoalkeeperRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearGoalkeeperRating()
	})
}

// SetOverallRating sets the "overall_rating" field.
func (u *FilmUpsertBulk) SetOverallRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetOverallRating(v)
	})
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *FilmUpsertBulk) AddOverallRating(v float64) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.AddOverallRating(v)
	})
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateOverallRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateOverallRating()
	})
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *FilmUpsertBulk) ClearOverallRating() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearOverallRating()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *FilmUpsertBulk) SetLogoURL(v string) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateLogoURL() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *FilmUpsertBulk) ClearLogoURL() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.ClearLogoURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FilmUpsertBulk) SetCreatedAt(v time.Time) *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FilmUpsertBulk) UpdateCreatedAt() *FilmUpsertBulk {
	return u.Update(func(s *FilmUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FilmUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FilmCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FilmCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FilmUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
