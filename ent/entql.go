// Code generated by ent, DO NOT EDIT.

package ent

import (
	"kinokz/ent/film"
	"kinokz/ent/predicate"
	"kinokz/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   film.Table,
			Columns: film.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: film.FieldID,
			},
		},
		Type: "Film",
		Fields: map[string]*sqlgraph.FieldSpec{
			film.FieldName:             {Type: field.TypeString, Column: film.FieldName},
			film.FieldDescription:      {Type: field.TypeString, Column: film.FieldDescription},
			film.FieldAuthorID:         {Type: field.TypeInt64, Column: film.FieldAuthorID},
			film.FieldManagerID:        {Type: field.TypeInt64, Column: film.FieldManagerID},
			film.FieldStadiumID:        {Type: field.TypeInt64, Column: film.FieldStadiumID},
			film.FieldStar:             {Type: field.TypeFloat64, Column: film.FieldStar},
			film.FieldAttackRating:     {Type: field.TypeFloat64, Column: film.FieldAttackRating},
			film.FieldMidfieldRating:   {Type: field.TypeFloat64, Column: film.FieldMidfieldRating},
			film.FieldDefenceRating:    {Type: field.TypeFloat64, Column: film.FieldDefenceRating},
			film.FieldGoalkeeperRating: {Type: field.TypeFloat64, Column: film.FieldGoalkeeperRating},
			film.FieldOverallRating:    {Type: field.TypeFloat64, Column: film.FieldOverallRating},
			film.FieldLogoURL:          {Type: field.TypeString, Column: film.FieldLogoURL},
			film.FieldCreatedAt:        {Type: field.TypeTime, Column: film.FieldCreatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldTgID:      {Type: field.TypeInt64, Column: user.FieldTgID},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldName:      {Type: field.TypeString, Column: user.FieldName},
			user.FieldSurname:   {Type: field.TypeString, Column: user.FieldSurname},
			user.FieldEmail:     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPhone:     {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
		},
	}
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.AuthorTable,
			Columns: []string{film.AuthorColumn},
			Bidi:    false,
		},
		"Film",
		"User",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   film.ManagerTable,
			Columns: []string{film.ManagerColumn},
			Bidi:    false,
		},
		"Film",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (fq *FilmQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FilmQuery builder.
func (fq *FilmQuery) Filter() *FilmFilter {
	return &FilmFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FilmMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FilmMutation builder.
func (m *FilmMutation) Filter() *FilmFilter {
	return &FilmFilter{config: m.config, predicateAdder: m}
}

// FilmFilter provides a generic filtering capability at runtime for FilmQuery.
type FilmFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FilmFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *FilmFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(film.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *FilmFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(film.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *FilmFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(film.FieldDescription))
}

// WhereAuthorID applies the entql int64 predicate on the author_id field.
func (f *FilmFilter) WhereAuthorID(p entql.Int64P) {
	f.Where(p.Field(film.FieldAuthorID))
}

// WhereManagerID applies the entql int64 predicate on the manager_id field.
func (f *FilmFilter) WhereManagerID(p entql.Int64P) {
	f.Where(p.Field(film.FieldManagerID))
}

// WhereStadiumID applies the entql int64 predicate on the stadium_id field.
func (f *FilmFilter) WhereStadiumID(p entql.Int64P) {
	f.Where(p.Field(film.FieldStadiumID))
}

// WhereStar applies the entql float64 predicate on the star field.
func (f *FilmFilter) WhereStar(p entql.Float64P) {
	f.Where(p.Field(film.FieldStar))
}

// WhereAttackRating applies the entql float64 predicate on the attack_rating field.
func (f *FilmFilter) WhereAttackRating(p entql.Float64P) {
	f.Where(p.Field(film.FieldAttackRating))
}

// WhereMidfieldRating applies the entql float64 predicate on the midfield_rating field.
func (f *FilmFilter) WhereMidfieldRating(p entql.Float64P) {
	f.Where(p.Field(film.FieldMidfieldRating))
}

// WhereDefenceRating applies the entql float64 predicate on the defence_rating field.
func (f *FilmFilter) WhereDefenceRating(p entql.Float64P) {
	f.Where(p.Field(film.FieldDefenceRating))
}

// WhereGoalkeeperRating applies the entql float64 predicate on the goalkeeper_rating field.
func (f *FilmFilter) WhereGoalkeeperRating(p entql.Float64P) {
	f.Where(p.Field(film.FieldGoalkeeperRating))
}

// WhereOverallRating applies the entql float64 predicate on the overall_rating field.
func (f *FilmFilter) WhereOverallRating(p entql.Float64P) {
	f.Where(p.Field(film.FieldOverallRating))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *FilmFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(film.FieldLogoURL))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FilmFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(film.FieldCreatedAt))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *FilmFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *FilmFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *FilmFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *FilmFilter) WhereHasManagerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(user.FieldID))
}

// WhereTgID applies the entql int64 predicate on the tg_id field.
func (f *UserFilter) WhereTgID(p entql.Int64P) {
	f.Where(p.Field(user.FieldTgID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereSurname applies the entql string predicate on the surname field.
func (f *UserFilter) WhereSurname(p entql.StringP) {
	f.Where(p.Field(user.FieldSurname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}
