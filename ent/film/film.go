// Code generated by ent, DO NOT EDIT.

package film

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the film type in the database.
	Label = "film"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldManagerID holds the string denoting the manager_id field in the database.
	FieldManagerID = "manager_id"
	// FieldStadiumID holds the string denoting the stadium_id field in the database.
	FieldStadiumID = "stadium_id"
	// FieldStar holds the string denoting the star field in the database.
	FieldStar = "star"
	// FieldAttackRating holds the string denoting the attack_rating field in the database.
	FieldAttackRating = "attack_rating"
	// FieldMidfieldRating holds the string denoting the midfield_rating field in the database.
	FieldMidfieldRating = "midfield_rating"
	// FieldDefenceRating holds the string denoting the defence_rating field in the database.
	FieldDefenceRating = "defence_rating"
	// FieldGoalkeeperRating holds the string denoting the goalkeeper_rating field in the database.
	FieldGoalkeeperRating = "goalkeeper_rating"
	// FieldOverallRating holds the string denoting the overall_rating field in the database.
	FieldOverallRating = "overall_rating"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeManager holds the string denoting the manager edge name in mutations.
	EdgeManager = "manager"
	// Table holds the table name of the film in the database.
	Table = "films"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "films"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
	// ManagerTable is the table that holds the manager relation/edge.
	ManagerTable = "films"
	// ManagerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ManagerInverseTable = "users"
	// ManagerColumn is the table column denoting the manager relation/edge.
	ManagerColumn = "manager_id"
)

// Columns holds all SQL columns for film fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldAuthorID,
	FieldManagerID,
	FieldStadiumID,
	FieldStar,
	FieldAttackRating,
	FieldMidfieldRating,
	FieldDefenceRating,
	FieldGoalkeeperRating,
	FieldOverallRating,
	FieldLogoURL,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Film queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByManagerID orders the results by the manager_id field.
func ByManagerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerID, opts...).ToFunc()
}

// ByStadiumID orders the results by the stadium_id field.
func ByStadiumID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStadiumID, opts...).ToFunc()
}

// ByStar orders the results by the star field.
func ByStar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStar, opts...).ToFunc()
}

// ByAttackRating orders the results by the attack_rating field.
func ByAttackRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttackRating, opts...).ToFunc()
}

// ByMidfieldRating orders the results by the midfield_rating field.
func ByMidfieldRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMidfieldRating, opts...).ToFunc()
}

// ByDefenceRating orders the results by the defence_rating field.
func ByDefenceRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefenceRating, opts...).ToFunc()
}

// ByGoalkeeperRating orders the results by the goalkeeper_rating field.
func ByGoalkeeperRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoalkeeperRating, opts...).ToFunc()
}

// ByOverallRating orders the results by the overall_rating field.
func ByOverallRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverallRating, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByManagerField orders the results by manager field.
func ByManagerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagerStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AuthorTable, AuthorColumn),
	)
}
func newManagerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
	)
}
