// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kinokz/ent/film"
	"kinokz/ent/predicate"
	"kinokz/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFilm = "Film"
	TypeUser = "User"
)

// FilmMutation represents an operation that mutates the Film nodes in the graph.
type FilmMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int64
	name                 *string
	description          *string
	stadium_id           *int64
	addstadium_id        *int64
	star                 *float64
	addstar              *float64
	attack_rating        *float64
	addattack_rating     *float64
	midfield_rating      *float64
	addmidfield_rating   *float64
	defence_rating       *float64
	adddefence_rating    *float64
	goalkeeper_rating    *float64
	addgoalkeeper_rating *float64
	overall_rating       *float64
	addoverall_rating    *float64
	logo_url             *string
	created_at           *time.Time
	clearedFields        map[string]struct{}
	author               *int64
	clearedauthor        bool
	manager              *int64
	clearedmanager       bool
	done                 bool
	oldValue             func(context.Context) (*Film, error)
	predicates           []predicate.Film
}

var _ ent.Mutation = (*FilmMutation)(nil)

// filmOption allows management of the mutation configuration using functional options.
type filmOption func(*FilmMutation)

// newFilmMutation creates new mutation for the Film entity.
func newFilmMutation(c config, op Op, opts ...filmOption) *FilmMutation {
	m := &FilmMutation{
		config:        c,
		op:            op,
		typ:           TypeFilm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilmID sets the ID field of the mutation.
func withFilmID(id int64) filmOption {
	return func(m *FilmMutation) {
		var (
			err   error
			once  sync.Once
			value *Film
		)
		m.oldValue = func(ctx context.Context) (*Film, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Film.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFilm sets the old Film of the mutation.
func withFilm(node *Film) filmOption {
	return func(m *FilmMutation) {
		m.oldValue = func(context.Context) (*Film, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilmMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilmMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Film entities.
func (m *FilmMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FilmMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FilmMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Film.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FilmMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FilmMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *FilmMutation) ClearName() {
	m.name = nil
	m.clearedFields[film.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *FilmMutation) NameCleared() bool {
	_, ok := m.clearedFields[film.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *FilmMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, film.FieldName)
}

// SetDescription sets the "description" field.
func (m *FilmMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FilmMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *FilmMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[film.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *FilmMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[film.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *FilmMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, film.FieldDescription)
}

// SetAuthorID sets the "author_id" field.
func (m *FilmMutation) SetAuthorID(i int64) {
	m.author = &i
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *FilmMutation) AuthorID() (r int64, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldAuthorID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ClearAuthorID clears the value of the "author_id" field.
func (m *FilmMutation) ClearAuthorID() {
	m.author = nil
	m.clearedFields[film.FieldAuthorID] = struct{}{}
}

// AuthorIDCleared returns if the "author_id" field was cleared in this mutation.
func (m *FilmMutation) AuthorIDCleared() bool {
	_, ok := m.clearedFields[film.FieldAuthorID]
	return ok
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *FilmMutation) ResetAuthorID() {
	m.author = nil
	delete(m.clearedFields, film.FieldAuthorID)
}

// SetManagerID sets the "manager_id" field.
func (m *FilmMutation) SetManagerID(i int64) {
	m.manager = &i
}

// ManagerID returns the value of the "manager_id" field in the mutation.
func (m *FilmMutation) ManagerID() (r int64, exists bool) {
	v := m.manager
	if v == nil {
		return
	}
	return *v, true
}

// OldManagerID returns the old "manager_id" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldManagerID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManagerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManagerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManagerID: %w", err)
	}
	return oldValue.ManagerID, nil
}

// ClearManagerID clears the value of the "manager_id" field.
func (m *FilmMutation) ClearManagerID() {
	m.manager = nil
	m.clearedFields[film.FieldManagerID] = struct{}{}
}

// ManagerIDCleared returns if the "manager_id" field was cleared in this mutation.
func (m *FilmMutation) ManagerIDCleared() bool {
	_, ok := m.clearedFields[film.FieldManagerID]
	return ok
}

// ResetManagerID resets all changes to the "manager_id" field.
func (m *FilmMutation) ResetManagerID() {
	m.manager = nil
	delete(m.clearedFields, film.FieldManagerID)
}

// SetStadiumID sets the "stadium_id" field.
func (m *FilmMutation) SetStadiumID(i int64) {
	m.stadium_id = &i
	m.addstadium_id = nil
}

// StadiumID returns the value of the "stadium_id" field in the mutation.
func (m *FilmMutation) StadiumID() (r int64, exists bool) {
	v := m.stadium_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStadiumID returns the old "stadium_id" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldStadiumID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStadiumID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStadiumID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStadiumID: %w", err)
	}
	return oldValue.StadiumID, nil
}

// AddStadiumID adds i to the "stadium_id" field.
func (m *FilmMutation) AddStadiumID(i int64) {
	if m.addstadium_id != nil {
		*m.addstadium_id += i
	} else {
		m.addstadium_id = &i
	}
}

// AddedStadiumID returns the value that was added to the "stadium_id" field in this mutation.
func (m *FilmMutation) AddedStadiumID() (r int64, exists bool) {
	v := m.addstadium_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStadiumID clears the value of the "stadium_id" field.
func (m *FilmMutation) ClearStadiumID() {
	m.stadium_id = nil
	m.addstadium_id = nil
	m.clearedFields[film.FieldStadiumID] = struct{}{}
}

// StadiumIDCleared returns if the "stadium_id" field was cleared in this mutation.
func (m *FilmMutation) StadiumIDCleared() bool {
	_, ok := m.clearedFields[film.FieldStadiumID]
	return ok
}

// ResetStadiumID resets all changes to the "stadium_id" field.
func (m *FilmMutation) ResetStadiumID() {
	m.stadium_id = nil
	m.addstadium_id = nil
	delete(m.clearedFields, film.FieldStadiumID)
}

// SetStar sets the "star" field.
func (m *FilmMutation) SetStar(f float64) {
	m.star = &f
	m.addstar = nil
}

// Star returns the value of the "star" field in the mutation.
func (m *FilmMutation) Star() (r float64, exists bool) {
	v := m.star
	if v == nil {
		return
	}
	return *v, true
}

// OldStar returns the old "star" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldStar(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStar: %w", err)
	}
	return oldValue.Star, nil
}

// AddStar adds f to the "star" field.
func (m *FilmMutation) AddStar(f float64) {
	if m.addstar != nil {
		*m.addstar += f
	} else {
		m.addstar = &f
	}
}

// AddedStar returns the value that was added to the "star" field in this mutation.
func (m *FilmMutation) AddedStar() (r float64, exists bool) {
	v := m.addstar
	if v == nil {
		return
	}
	return *v, true
}

// ClearStar clears the value of the "star" field.
func (m *FilmMutation) ClearStar() {
	m.star = nil
	m.addstar = nil
	m.clearedFields[film.FieldStar] = struct{}{}
}

// StarCleared returns if the "star" field was cleared in this mutation.
func (m *FilmMutation) StarCleared() bool {
	_, ok := m.clearedFields[film.FieldStar]
	return ok
}

// ResetStar resets all changes to the "star" field.
func (m *FilmMutation) ResetStar() {
	m.star = nil
	m.addstar = nil
	delete(m.clearedFields, film.FieldStar)
}

// SetAttackRating sets the "attack_rating" field.
func (m *FilmMutation) SetAttackRating(f float64) {
	m.attack_rating = &f
	m.addattack_rating = nil
}

// AttackRating returns the value of the "attack_rating" field in the mutation.
func (m *FilmMutation) AttackRating() (r float64, exists bool) {
	v := m.attack_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldAttackRating returns the old "attack_rating" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldAttackRating(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttackRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttackRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttackRating: %w", err)
	}
	return oldValue.AttackRating, nil
}

// AddAttackRating adds f to the "attack_rating" field.
func (m *FilmMutation) AddAttackRating(f float64) {
	if m.addattack_rating != nil {
		*m.addattack_rating += f
	} else {
		m.addattack_rating = &f
	}
}

// AddedAttackRating returns the value that was added to the "attack_rating" field in this mutation.
func (m *FilmMutation) AddedAttackRating() (r float64, exists bool) {
	v := m.addattack_rating
	if v == nil {
		return
	}
	return *v, true
}

// ClearAttackRating clears the value of the "attack_rating" field.
func (m *FilmMutation) ClearAttackRating() {
	m.attack_rating = nil
	m.addattack_rating = nil
	m.clearedFields[film.FieldAttackRating] = struct{}{}
}

// AttackRatingCleared returns if the "attack_rating" field was cleared in this mutation.
func (m *FilmMutation) AttackRatingCleared() bool {
	_, ok := m.clearedFields[film.FieldAttackRating]
	return ok
}

// ResetAttackRating resets all changes to the "attack_rating" field.
func (m *FilmMutation) ResetAttackRating() {
	m.attack_rating = nil
	m.addattack_rating = nil
	delete(m.clearedFields, film.FieldAttackRating)
}

// SetMidfieldRating sets the "midfield_rating" field.
func (m *FilmMutation) SetMidfieldRating(f float64) {
	m.midfield_rating = &f
	m.addmidfield_rating = nil
}

// MidfieldRating returns the value of the "midfield_rating" field in the mutation.
func (m *FilmMutation) MidfieldRating() (r float64, exists bool) {
	v := m.midfield_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldMidfieldRating returns the old "midfield_rating" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldMidfieldRating(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMidfieldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMidfieldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMidfieldRating: %w", err)
	}
	return oldValue.MidfieldRating, nil
}

// AddMidfieldRating adds f to the "midfield_rating" field.
func (m *FilmMutation) AddMidfieldRating(f float64) {
	if m.addmidfield_rating != nil {
		*m.addmidfield_rating += f
	} else {
		m.addmidfield_rating = &f
	}
}

// AddedMidfieldRating returns the value that was added to the "midfield_rating" field in this mutation.
func (m *FilmMutation) AddedMidfieldRating() (r float64, exists bool) {
	v := m.addmidfield_rating
	if v == nil {
		return
	}
	return *v, true
}

// ClearMidfieldRating clears the value of the "midfield_rating" field.
func (m *FilmMutation) ClearMidfieldRating() {
	m.midfield_rating = nil
	m.addmidfield_rating = nil
	m.clearedFields[film.FieldMidfieldRating] = struct{}{}
}

// MidfieldRatingCleared returns if the "midfield_rating" field was cleared in this mutation.
func (m *FilmMutation) MidfieldRatingCleared() bool {
	_, ok := m.clearedFields[film.FieldMidfieldRating]
	return ok
}

// ResetMidfieldRating resets all changes to the "midfield_rating" field.
func (m *FilmMutation) ResetMidfieldRating() {
	m.midfield_rating = nil
	m.addmidfield_rating = nil
	delete(m.clearedFields, film.FieldMidfieldRating)
}

// SetDefenceRating sets the "defence_rating" field.
func (m *FilmMutation) SetDefenceRating(f float64) {
	m.defence_rating = &f
	m.adddefence_rating = nil
}

// DefenceRating returns the value of the "defence_rating" field in the mutation.
func (m *FilmMutation) DefenceRating() (r float64, exists bool) {
	v := m.defence_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldDefenceRating returns the old "defence_rating" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldDefenceRating(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefenceRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefenceRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefenceRating: %w", err)
	}
	return oldValue.DefenceRating, nil
}

// AddDefenceRating adds f to the "defence_rating" field.
func (m *FilmMutation) AddDefenceRating(f float64) {
	if m.adddefence_rating != nil {
		*m.adddefence_rating += f
	} else {
		m.adddefence_rating = &f
	}
}

// AddedDefenceRating returns the value that was added to the "defence_rating" field in this mutation.
func (m *FilmMutation) AddedDefenceRating() (r float64, exists bool) {
	v := m.adddefence_rating
	if v == nil {
		return
	}
	return *v, true
}

// ClearDefenceRating clears the value of the "defence_rating" field.
func (m *FilmMutation) ClearDefenceRating() {
	m.defence_rating = nil
	m.adddefence_rating = nil
	m.clearedFields[film.FieldDefenceRating] = struct{}{}
}

// DefenceRatingCleared returns if the "defence_rating" field was cleared in this mutation.
func (m *FilmMutation) DefenceRatingCleared() bool {
	_, ok := m.clearedFields[film.FieldDefenceRating]
	return ok
}

// ResetDefenceRating resets all changes to the "defence_rating" field.
func (m *FilmMutation) ResetDefenceRating() {
	m.defence_rating = nil
	m.adddefence_rating = nil
	delete(m.clearedFields, film.FieldDefenceRating)
}

// SetGoalkeeperRating sets the "goalkeeper_rating" field.
func (m *FilmMutation) SetGoalkeeperRating(f float64) {
	m.goalkeeper_rating = &f
	m.addgoalkeeper_rating = nil
}

// GoalkeeperRating returns the value of the "goalkeeper_rating" field in the mutation.
func (m *FilmMutation) GoalkeeperRating() (r float64, exists bool) {
	v := m.goalkeeper_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldGoalkeeperRating returns the old "goalkeeper_rating" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldGoalkeeperRating(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoalkeeperRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoalkeeperRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoalkeeperRating: %w", err)
	}
	return oldValue.GoalkeeperRating, nil
}

// AddGoalkeeperRating adds f to the "goalkeeper_rating" field.
func (m *FilmMutation) AddGoalkeeperRating(f float64) {
	if m.addgoalkeeper_rating != nil {
		*m.addgoalkeeper_rating += f
	} else {
		m.addgoalkeeper_rating = &f
	}
}

// AddedGoalkeeperRating returns the value that was added to the "goalkeeper_rating" field in this mutation.
func (m *FilmMutation) AddedGoalkeeperRating() (r float64, exists bool) {
	v := m.addgoalkeeper_rating
	if v == nil {
		return
	}
	return *v, true
}

// ClearGoalkeeperRating clears the value of the "goalkeeper_rating" field.
func (m *FilmMutation) ClearGoalkeeperRating() {
	m.goalkeeper_rating = nil
	m.addgoalkeeper_rating = nil
	m.clearedFields[film.FieldGoalkeeperRating] = struct{}{}
}

// GoalkeeperRatingCleared returns if the "goalkeeper_rating" field was cleared in this mutation.
func (m *FilmMutation) GoalkeeperRatingCleared() bool {
	_, ok := m.clearedFields[film.FieldGoalkeeperRating]
	return ok
}

// ResetGoalkeeperRating resets all changes to the "goalkeeper_rating" field.
func (m *FilmMutation) ResetGoalkeeperRating() {
	m.goalkeeper_rating = nil
	m.addgoalkeeper_rating = nil
	delete(m.clearedFields, film.FieldGoalkeeperRating)
}

// SetOverallRating sets the "overall_rating" field.
func (m *FilmMutation) SetOverallRating(f float64) {
	m.overall_rating = &f
	m.addoverall_rating = nil
}

// OverallRating returns the value of the "overall_rating" field in the mutation.
func (m *FilmMutation) OverallRating() (r float64, exists bool) {
	v := m.overall_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldOverallRating returns the old "overall_rating" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldOverallRating(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverallRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverallRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverallRating: %w", err)
	}
	return oldValue.OverallRating, nil
}

// AddOverallRating adds f to the "overall_rating" field.
func (m *FilmMutation) AddOverallRating(f float64) {
	if m.addoverall_rating != nil {
		*m.addoverall_rating += f
	} else {
		m.addoverall_rating = &f
	}
}

// AddedOverallRating returns the value that was added to the "overall_rating" field in this mutation.
func (m *FilmMutation) AddedOverallRating() (r float64, exists bool) {
	v := m.addoverall_rating
	if v == nil {
		return
	}
	return *v, true
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (m *FilmMutation) ClearOverallRating() {
	m.overall_rating = nil
	m.addoverall_rating = nil
	m.clearedFields[film.FieldOverallRating] = struct{}{}
}

// OverallRatingCleared returns if the "overall_rating" field was cleared in this mutation.
func (m *FilmMutation) OverallRatingCleared() bool {
	_, ok := m.clearedFields[film.FieldOverallRating]
	return ok
}

// ResetOverallRating resets all changes to the "overall_rating" field.
func (m *FilmMutation) ResetOverallRating() {
	m.overall_rating = nil
	m.addoverall_rating = nil
	delete(m.clearedFields, film.FieldOverallRating)
}

// SetLogoURL sets the "logo_url" field.
func (m *FilmMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *FilmMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *FilmMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[film.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *FilmMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[film.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *FilmMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, film.FieldLogoURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *FilmMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FilmMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Film entity.
// If the Film object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilmMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FilmMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *FilmMutation) ClearAuthor() {
	m.clearedauthor = true
	m.clearedFields[film.FieldAuthorID] = struct{}{}
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *FilmMutation) AuthorCleared() bool {
	return m.AuthorIDCleared() || m.clearedauthor
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *FilmMutation) AuthorIDs() (ids []int64) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *FilmMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// ClearManager clears the "manager" edge to the User entity.
func (m *FilmMutation) ClearManager() {
	m.clearedmanager = true
	m.clearedFields[film.FieldManagerID] = struct{}{}
}

// ManagerCleared reports if the "manager" edge to the User entity was cleared.
func (m *FilmMutation) ManagerCleared() bool {
	return m.ManagerIDCleared() || m.clearedmanager
}

// ManagerIDs returns the "manager" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManagerID instead. It exists only for internal usage by the builders.
func (m *FilmMutation) ManagerIDs() (ids []int64) {
	if id := m.manager; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManager resets all changes to the "manager" edge.
func (m *FilmMutation) ResetManager() {
	m.manager = nil
	m.clearedmanager = false
}

// Where appends a list predicates to the FilmMutation builder.
func (m *FilmMutation) Where(ps ...predicate.Film) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FilmMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FilmMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Film, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FilmMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FilmMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Film).
func (m *FilmMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FilmMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, film.FieldName)
	}
	if m.description != nil {
		fields = append(fields, film.FieldDescription)
	}
	if m.author != nil {
		fields = append(fields, film.FieldAuthorID)
	}
	if m.manager != nil {
		fields = append(fields, film.FieldManagerID)
	}
	if m.stadium_id != nil {
		fields = append(fields, film.FieldStadiumID)
	}
	if m.star != nil {
		fields = append(fields, film.FieldStar)
	}
	if m.attack_rating != nil {
		fields = append(fields, film.FieldAttackRating)
	}
	if m.midfield_rating != nil {
		fields = append(fields, film.FieldMidfieldRating)
	}
	if m.defence_rating != nil {
		fields = append(fields, film.FieldDefenceRating)
	}
	if m.goalkeeper_rating != nil {
		fields = append(fields, film.FieldGoalkeeperRating)
	}
	if m.overall_rating != nil {
		fields = append(fields, film.FieldOverallRating)
	}
	if m.logo_url != nil {
		fields = append(fields, film.FieldLogoURL)
	}
	if m.created_at != nil {
		fields = append(fields, film.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FilmMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case film.FieldName:
		return m.Name()
	case film.FieldDescription:
		return m.Description()
	case film.FieldAuthorID:
		return m.AuthorID()
	case film.FieldManagerID:
		return m.ManagerID()
	case film.FieldStadiumID:
		return m.StadiumID()
	case film.FieldStar:
		return m.Star()
	case film.FieldAttackRating:
		return m.AttackRating()
	case film.FieldMidfieldRating:
		return m.MidfieldRating()
	case film.FieldDefenceRating:
		return m.DefenceRating()
	case film.FieldGoalkeeperRating:
		return m.GoalkeeperRating()
	case film.FieldOverallRating:
		return m.OverallRating()
	case film.FieldLogoURL:
		return m.LogoURL()
	case film.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FilmMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case film.FieldName:
		return m.OldName(ctx)
	case film.FieldDescription:
		return m.OldDescription(ctx)
	case film.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case film.FieldManagerID:
		return m.OldManagerID(ctx)
	case film.FieldStadiumID:
		return m.OldStadiumID(ctx)
	case film.FieldStar:
		return m.OldStar(ctx)
	case film.FieldAttackRating:
		return m.OldAttackRating(ctx)
	case film.FieldMidfieldRating:
		return m.OldMidfieldRating(ctx)
	case film.FieldDefenceRating:
		return m.OldDefenceRating(ctx)
	case film.FieldGoalkeeperRating:
		return m.OldGoalkeeperRating(ctx)
	case film.FieldOverallRating:
		return m.OldOverallRating(ctx)
	case film.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case film.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Film field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilmMutation) SetField(name string, value ent.Value) error {
	switch name {
	case film.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case film.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case film.FieldAuthorID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case film.FieldManagerID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManagerID(v)
		return nil
	case film.FieldStadiumID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStadiumID(v)
		return nil
	case film.FieldStar:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStar(v)
		return nil
	case film.FieldAttackRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttackRating(v)
		return nil
	case film.FieldMidfieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMidfieldRating(v)
		return nil
	case film.FieldDefenceRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefenceRating(v)
		return nil
	case film.FieldGoalkeeperRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoalkeeperRating(v)
		return nil
	case film.FieldOverallRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverallRating(v)
		return nil
	case film.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case film.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Film field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FilmMutation) AddedFields() []string {
	var fields []string
	if m.addstadium_id != nil {
		fields = append(fields, film.FieldStadiumID)
	}
	if m.addstar != nil {
		fields = append(fields, film.FieldStar)
	}
	if m.addattack_rating != nil {
		fields = append(fields, film.FieldAttackRating)
	}
	if m.addmidfield_rating != nil {
		fields = append(fields, film.FieldMidfieldRating)
	}
	if m.adddefence_rating != nil {
		fields = append(fields, film.FieldDefenceRating)
	}
	if m.addgoalkeeper_rating != nil {
		fields = append(fields, film.FieldGoalkeeperRating)
	}
	if m.addoverall_rating != nil {
		fields = append(fields, film.FieldOverallRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FilmMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case film.FieldStadiumID:
		return m.AddedStadiumID()
	case film.FieldStar:
		return m.AddedStar()
	case film.FieldAttackRating:
		return m.AddedAttackRating()
	case film.FieldMidfieldRating:
		return m.AddedMidfieldRating()
	case film.FieldDefenceRating:
		return m.AddedDefenceRating()
	case film.FieldGoalkeeperRating:
		return m.AddedGoalkeeperRating()
	case film.FieldOverallRating:
		return m.AddedOverallRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilmMutation) AddField(name string, value ent.Value) error {
	switch name {
	case film.FieldStadiumID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStadiumID(v)
		return nil
	case film.FieldStar:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStar(v)
		return nil
	case film.FieldAttackRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttackRating(v)
		return nil
	case film.FieldMidfieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMidfieldRating(v)
		return nil
	case film.FieldDefenceRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefenceRating(v)
		return nil
	case film.FieldGoalkeeperRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoalkeeperRating(v)
		return nil
	case film.FieldOverallRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOverallRating(v)
		return nil
	}
	return fmt.Errorf("unknown Film numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FilmMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(film.FieldName) {
		fields = append(fields, film.FieldName)
	}
	if m.FieldCleared(film.FieldDescription) {
		fields = append(fields, film.FieldDescription)
	}
	if m.FieldCleared(film.FieldAuthorID) {
		fields = append(fields, film.FieldAuthorID)
	}
	if m.FieldCleared(film.FieldManagerID) {
		fields = append(fields, film.FieldManagerID)
	}
	if m.FieldCleared(film.FieldStadiumID) {
		fields = append(fields, film.FieldStadiumID)
	}
	if m.FieldCleared(film.FieldStar) {
		fields = append(fields, film.FieldStar)
	}
	if m.FieldCleared(film.FieldAttackRating) {
		fields = append(fields, film.FieldAttackRating)
	}
	if m.FieldCleared(film.FieldMidfieldRating) {
		fields = append(fields, film.FieldMidfieldRating)
	}
	if m.FieldCleared(film.FieldDefenceRating) {
		fields = append(fields, film.FieldDefenceRating)
	}
	if m.FieldCleared(film.FieldGoalkeeperRating) {
		fields = append(fields, film.FieldGoalkeeperRating)
	}
	if m.FieldCleared(film.FieldOverallRating) {
		fields = append(fields, film.FieldOverallRating)
	}
	if m.FieldCleared(film.FieldLogoURL) {
		fields = append(fields, film.FieldLogoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FilmMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilmMutation) ClearField(name string) error {
	switch name {
	case film.FieldName:
		m.ClearName()
		return nil
	case film.FieldDescription:
		m.ClearDescription()
		return nil
	case film.FieldAuthorID:
		m.ClearAuthorID()
		return nil
	case film.FieldManagerID:
		m.ClearManagerID()
		return nil
	case film.FieldStadiumID:
		m.ClearStadiumID()
		return nil
	case film.FieldStar:
		m.ClearStar()
		return nil
	case film.FieldAttackRating:
		m.ClearAttackRating()
		return nil
	case film.FieldMidfieldRating:
		m.ClearMidfieldRating()
		return nil
	case film.FieldDefenceRating:
		m.ClearDefenceRating()
		return nil
	case film.FieldGoalkeeperRating:
		m.ClearGoalkeeperRating()
		return nil
	case film.FieldOverallRating:
		m.ClearOverallRating()
		return nil
	case film.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Film nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FilmMutation) ResetField(name string) error {
	switch name {
	case film.FieldName:
		m.ResetName()
		return nil
	case film.FieldDescription:
		m.ResetDescription()
		return nil
	case film.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case film.FieldManagerID:
		m.ResetManagerID()
		return nil
	case film.FieldStadiumID:
		m.ResetStadiumID()
		return nil
	case film.FieldStar:
		m.ResetStar()
		return nil
	case film.FieldAttackRating:
		m.ResetAttackRating()
		return nil
	case film.FieldMidfieldRating:
		m.ResetMidfieldRating()
		return nil
	case film.FieldDefenceRating:
		m.ResetDefenceRating()
		return nil
	case film.FieldGoalkeeperRating:
		m.ResetGoalkeeperRating()
		return nil
	case film.FieldOverallRating:
		m.ResetOverallRating()
		return nil
	case film.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case film.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Film field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FilmMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, film.EdgeAuthor)
	}
	if m.manager != nil {
		edges = append(edges, film.EdgeManager)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FilmMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case film.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case film.EdgeManager:
		if id := m.manager; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FilmMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FilmMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FilmMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, film.EdgeAuthor)
	}
	if m.clearedmanager {
		edges = append(edges, film.EdgeManager)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FilmMutation) EdgeCleared(name string) bool {
	switch name {
	case film.EdgeAuthor:
		return m.clearedauthor
	case film.EdgeManager:
		return m.clearedmanager
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FilmMutation) ClearEdge(name string) error {
	switch name {
	case film.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case film.EdgeManager:
		m.ClearManager()
		return nil
	}
	return fmt.Errorf("unknown Film unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FilmMutation) ResetEdge(name string) error {
	switch name {
	case film.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case film.EdgeManager:
		m.ResetManager()
		return nil
	}
	return fmt.Errorf("unknown Film edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	tg_id         *int64
	addtg_id      *int64
	username      *string
	name          *string
	surname       *string
	email         *string
	phone         *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTgID sets the "tg_id" field.
func (m *UserMutation) SetTgID(i int64) {
	m.tg_id = &i
	m.addtg_id = nil
}

// TgID returns the value of the "tg_id" field in the mutation.
func (m *UserMutation) TgID() (r int64, exists bool) {
	v := m.tg_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTgID returns the old "tg_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTgID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTgID: %w", err)
	}
	return oldValue.TgID, nil
}

// AddTgID adds i to the "tg_id" field.
func (m *UserMutation) AddTgID(i int64) {
	if m.addtg_id != nil {
		*m.addtg_id += i
	} else {
		m.addtg_id = &i
	}
}

// AddedTgID returns the value that was added to the "tg_id" field in this mutation.
func (m *UserMutation) AddedTgID() (r int64, exists bool) {
	v := m.addtg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTgID resets all changes to the "tg_id" field.
func (m *UserMutation) ResetTgID() {
	m.tg_id = nil
	m.addtg_id = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetSurname sets the "surname" field.
func (m *UserMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *UserMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSurname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *UserMutation) ResetSurname() {
	m.surname = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.tg_id != nil {
		fields = append(fields, user.FieldTgID)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.surname != nil {
		fields = append(fields, user.FieldSurname)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTgID:
		return m.TgID()
	case user.FieldUsername:
		return m.Username()
	case user.FieldName:
		return m.Name()
	case user.FieldSurname:
		return m.Surname()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldTgID:
		return m.OldTgID(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldSurname:
		return m.OldSurname(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldTgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTgID(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addtg_id != nil {
		fields = append(fields, user.FieldTgID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTgID:
		return m.AddedTgID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldTgID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTgID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldTgID:
		m.ResetTgID()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldSurname:
		m.ResetSurname()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
